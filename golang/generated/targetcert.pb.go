// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: targetcert.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TargetCertReq struct {
	APIKey               string   `protobuf:"bytes,1,opt,name=APIKey,proto3" json:"APIKey,omitempty"`
	EncCSR               string   `protobuf:"bytes,2,opt,name=EncCSR,proto3" json:"EncCSR,omitempty"`
	ClusterID            string   `protobuf:"bytes,3,opt,name=ClusterID,proto3" json:"ClusterID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TargetCertReq) Reset()         { *m = TargetCertReq{} }
func (m *TargetCertReq) String() string { return proto.CompactTextString(m) }
func (*TargetCertReq) ProtoMessage()    {}
func (*TargetCertReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcca4196ccb43c9e, []int{0}
}
func (m *TargetCertReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TargetCertReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TargetCertReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TargetCertReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetCertReq.Merge(m, src)
}
func (m *TargetCertReq) XXX_Size() int {
	return m.Size()
}
func (m *TargetCertReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetCertReq.DiscardUnknown(m)
}

var xxx_messageInfo_TargetCertReq proto.InternalMessageInfo

func (m *TargetCertReq) GetAPIKey() string {
	if m != nil {
		return m.APIKey
	}
	return ""
}

func (m *TargetCertReq) GetEncCSR() string {
	if m != nil {
		return m.EncCSR
	}
	return ""
}

func (m *TargetCertReq) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

type TargetCertRes struct {
	Cert                 string   `protobuf:"bytes,1,opt,name=Cert,proto3" json:"Cert,omitempty"`
	CertChain            string   `protobuf:"bytes,2,opt,name=CertChain,proto3" json:"CertChain,omitempty"`
	TenantRoot           string   `protobuf:"bytes,3,opt,name=TenantRoot,proto3" json:"TenantRoot,omitempty"`
	Token                string   `protobuf:"bytes,4,opt,name=Token,proto3" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TargetCertRes) Reset()         { *m = TargetCertRes{} }
func (m *TargetCertRes) String() string { return proto.CompactTextString(m) }
func (*TargetCertRes) ProtoMessage()    {}
func (*TargetCertRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcca4196ccb43c9e, []int{1}
}
func (m *TargetCertRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TargetCertRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TargetCertRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TargetCertRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetCertRes.Merge(m, src)
}
func (m *TargetCertRes) XXX_Size() int {
	return m.Size()
}
func (m *TargetCertRes) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetCertRes.DiscardUnknown(m)
}

var xxx_messageInfo_TargetCertRes proto.InternalMessageInfo

func (m *TargetCertRes) GetCert() string {
	if m != nil {
		return m.Cert
	}
	return ""
}

func (m *TargetCertRes) GetCertChain() string {
	if m != nil {
		return m.CertChain
	}
	return ""
}

func (m *TargetCertRes) GetTenantRoot() string {
	if m != nil {
		return m.TenantRoot
	}
	return ""
}

func (m *TargetCertRes) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*TargetCertReq)(nil), "rpc.TargetCertReq")
	proto.RegisterType((*TargetCertRes)(nil), "rpc.TargetCertRes")
}

func init() { proto.RegisterFile("targetcert.proto", fileDescriptor_fcca4196ccb43c9e) }

var fileDescriptor_fcca4196ccb43c9e = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x49, 0x2c, 0x4a,
	0x4f, 0x2d, 0x49, 0x4e, 0x2d, 0x2a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a,
	0x48, 0x56, 0x8a, 0xe5, 0xe2, 0x0d, 0x01, 0x4b, 0x38, 0xa7, 0x16, 0x95, 0x04, 0xa5, 0x16, 0x0a,
	0x89, 0x71, 0xb1, 0x39, 0x06, 0x78, 0x7a, 0xa7, 0x56, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06,
	0x41, 0x79, 0x20, 0x71, 0xd7, 0xbc, 0x64, 0xe7, 0xe0, 0x20, 0x09, 0x26, 0x88, 0x38, 0x84, 0x27,
	0x24, 0xc3, 0xc5, 0xe9, 0x9c, 0x53, 0x5a, 0x5c, 0x92, 0x5a, 0xe4, 0xe9, 0x22, 0xc1, 0x0c, 0x96,
	0x42, 0x08, 0x28, 0x95, 0xa3, 0x1a, 0x5f, 0x2c, 0x24, 0xc4, 0xc5, 0x02, 0x62, 0x42, 0x0d, 0x07,
	0xb3, 0xc1, 0x46, 0xa4, 0x16, 0x95, 0x38, 0x67, 0x24, 0x66, 0xe6, 0x41, 0x4d, 0x47, 0x08, 0x08,
	0xc9, 0x71, 0x71, 0x85, 0xa4, 0xe6, 0x25, 0xe6, 0x95, 0x04, 0xe5, 0xe7, 0x97, 0x40, 0x6d, 0x40,
	0x12, 0x11, 0x12, 0xe1, 0x62, 0x0d, 0xc9, 0xcf, 0x4e, 0xcd, 0x93, 0x60, 0x01, 0x4b, 0x41, 0x38,
	0x46, 0x3e, 0x5c, 0x82, 0x7e, 0xf9, 0x25, 0x89, 0x45, 0x95, 0xfe, 0x05, 0xa9, 0x79, 0xc1, 0xa9,
	0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0xe6, 0x5c, 0xbc, 0xee, 0xa9, 0x79, 0x08, 0x07, 0x09, 0x09,
	0xe9, 0x15, 0x15, 0x24, 0xeb, 0xa1, 0x04, 0x80, 0x14, 0xa6, 0x58, 0xb1, 0x93, 0xf8, 0x89, 0x47,
	0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3, 0xb1, 0x1c, 0x43, 0x14,
	0xab, 0x9e, 0x75, 0x51, 0x41, 0x72, 0x12, 0x1b, 0x38, 0x28, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xbf, 0x68, 0x1f, 0x09, 0x5e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NotaryOpenServiceClient is the client API for NotaryOpenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotaryOpenServiceClient interface {
	GenTargetCert(ctx context.Context, in *TargetCertReq, opts ...grpc.CallOption) (*TargetCertRes, error)
}

type notaryOpenServiceClient struct {
	cc *grpc.ClientConn
}

func NewNotaryOpenServiceClient(cc *grpc.ClientConn) NotaryOpenServiceClient {
	return &notaryOpenServiceClient{cc}
}

func (c *notaryOpenServiceClient) GenTargetCert(ctx context.Context, in *TargetCertReq, opts ...grpc.CallOption) (*TargetCertRes, error) {
	out := new(TargetCertRes)
	err := c.cc.Invoke(ctx, "/rpc.NotaryOpenService/GenTargetCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotaryOpenServiceServer is the server API for NotaryOpenService service.
type NotaryOpenServiceServer interface {
	GenTargetCert(context.Context, *TargetCertReq) (*TargetCertRes, error)
}

// UnimplementedNotaryOpenServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNotaryOpenServiceServer struct {
}

func (*UnimplementedNotaryOpenServiceServer) GenTargetCert(ctx context.Context, req *TargetCertReq) (*TargetCertRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenTargetCert not implemented")
}

func RegisterNotaryOpenServiceServer(s *grpc.Server, srv NotaryOpenServiceServer) {
	s.RegisterService(&_NotaryOpenService_serviceDesc, srv)
}

func _NotaryOpenService_GenTargetCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetCertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryOpenServiceServer).GenTargetCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NotaryOpenService/GenTargetCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryOpenServiceServer).GenTargetCert(ctx, req.(*TargetCertReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotaryOpenService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NotaryOpenService",
	HandlerType: (*NotaryOpenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenTargetCert",
			Handler:    _NotaryOpenService_GenTargetCert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "targetcert.proto",
}

func (m *TargetCertReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetCertReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TargetCertReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClusterID) > 0 {
		i -= len(m.ClusterID)
		copy(dAtA[i:], m.ClusterID)
		i = encodeVarintTargetcert(dAtA, i, uint64(len(m.ClusterID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EncCSR) > 0 {
		i -= len(m.EncCSR)
		copy(dAtA[i:], m.EncCSR)
		i = encodeVarintTargetcert(dAtA, i, uint64(len(m.EncCSR)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.APIKey) > 0 {
		i -= len(m.APIKey)
		copy(dAtA[i:], m.APIKey)
		i = encodeVarintTargetcert(dAtA, i, uint64(len(m.APIKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TargetCertRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetCertRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TargetCertRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintTargetcert(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TenantRoot) > 0 {
		i -= len(m.TenantRoot)
		copy(dAtA[i:], m.TenantRoot)
		i = encodeVarintTargetcert(dAtA, i, uint64(len(m.TenantRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CertChain) > 0 {
		i -= len(m.CertChain)
		copy(dAtA[i:], m.CertChain)
		i = encodeVarintTargetcert(dAtA, i, uint64(len(m.CertChain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cert) > 0 {
		i -= len(m.Cert)
		copy(dAtA[i:], m.Cert)
		i = encodeVarintTargetcert(dAtA, i, uint64(len(m.Cert)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTargetcert(dAtA []byte, offset int, v uint64) int {
	offset -= sovTargetcert(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TargetCertReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.APIKey)
	if l > 0 {
		n += 1 + l + sovTargetcert(uint64(l))
	}
	l = len(m.EncCSR)
	if l > 0 {
		n += 1 + l + sovTargetcert(uint64(l))
	}
	l = len(m.ClusterID)
	if l > 0 {
		n += 1 + l + sovTargetcert(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TargetCertRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovTargetcert(uint64(l))
	}
	l = len(m.CertChain)
	if l > 0 {
		n += 1 + l + sovTargetcert(uint64(l))
	}
	l = len(m.TenantRoot)
	if l > 0 {
		n += 1 + l + sovTargetcert(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTargetcert(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTargetcert(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTargetcert(x uint64) (n int) {
	return sovTargetcert(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TargetCertReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTargetcert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetCertReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetCertReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargetcert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTargetcert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTargetcert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncCSR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargetcert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTargetcert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTargetcert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncCSR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargetcert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTargetcert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTargetcert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTargetcert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTargetcert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TargetCertRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTargetcert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetCertRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetCertRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargetcert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTargetcert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTargetcert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargetcert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTargetcert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTargetcert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargetcert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTargetcert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTargetcert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargetcert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTargetcert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTargetcert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTargetcert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTargetcert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTargetcert(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTargetcert
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTargetcert
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTargetcert
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTargetcert
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTargetcert
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTargetcert
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTargetcert        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTargetcert          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTargetcert = fmt.Errorf("proto: unexpected end of group")
)
